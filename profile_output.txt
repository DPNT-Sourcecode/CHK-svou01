Timer unit: 1e-09 s

Total time: 0.947242 s
File: /Users/morgan/jobhunting/iwoca/coding-challenge/accelerate_runner/lib/solutions/CHK/checkout_solution.py
Function: quantities_geq at line 24

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    24                                           @cache
    25                                           @line_profiler.profile
    26                                           def quantities_geq(lhs: Quantities, rhs: Quantities) -> bool:
    27   1964822  221624000.0    112.8     23.4      for sku in rhs:
    28   1342628  156208000.0    116.3     16.5          if sku not in lhs:
    29    720434   83362000.0    115.7      8.8              return False
    30    853314  311553000.0    365.1     32.9      for sku, quantity in rhs.items():
    31    622194   98142000.0    157.7     10.4          if sku not in lhs or lhs[sku] < quantity:
    32    391074   50492000.0    129.1      5.3              return False
    33    231120   25861000.0    111.9      2.7      return True

Total time: 4.45191 s
File: /Users/morgan/jobhunting/iwoca/coding-challenge/accelerate_runner/lib/solutions/CHK/checkout_solution.py
Function: find_best_deal at line 122

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   122                                           @cache
   123                                           @line_profiler.profile
   124                                           def find_best_deal(
   125                                               quantities: Quantities,
   126                                               *,
   127                                               offers: frozenset[Offer] = OFFERS
   128                                           ) -> Optional[Deal]:
   129     32749   34295000.0   1047.2      0.8      if all(quantity == 0 for quantity in quantities.values()):
   130         1       1000.0   1000.0      0.0          empty = FrozenList([])
   131         1       1000.0   1000.0      0.0          empty.freeze()
   132         1          0.0      0.0      0.0          return empty
   133                                           
   134     32748 3219704000.0  98317.6     72.3      applicable_offers = set(offer for offer in offers if quantities_geq(quantities, offer.requires_quantities))
   135                                           
   136     32747    3340000.0    102.0      0.1      best_deal = None
   137     32747    4370000.0    133.4      0.1      best_price = math.inf
   138    263750   41436000.0    157.1      0.9      for offer in applicable_offers:
   139    231015  139145000.0    602.3      3.1          new_quantities = {**quantities}
   140    462031   86194000.0    186.6      1.9          for included_sku, included_quantity in offer.includes.items():
   141    231016   28311000.0    122.5      0.6              if included_sku in new_quantities:
   142    462032   77766000.0    168.3      1.7                  new_quantities[included_sku] = max(
   143    231016   28410000.0    123.0      0.6                      0, new_quantities[included_sku] - included_quantity
   144                                                           )
   145    231015   55656000.0    240.9      1.3          new_quantities = frozendict(new_quantities)
   146                                           
   147    231015  265773000.0   1150.5      6.0          rest_of_deal = find_best_deal(new_quantities)
   148    231003   24973000.0    108.1      0.6          if rest_of_deal is None:
   149                                                       continue
   150                                           
   151    231003   77807000.0    336.8      1.7          new_deal = FrozenList([offer, *rest_of_deal])
   152    231003   28335000.0    122.7      0.6          new_deal.freeze()
   153                                           
   154    231003  320319000.0   1386.6      7.2          if (new_deal_price := get_deal_price(new_deal)) < best_price:
   155     40812    4322000.0    105.9      0.1              best_price = new_deal_price
   156     40812    7319000.0    179.3      0.2              best_deal = new_deal
   157                                           
   158     32735    4434000.0    135.5      0.1      return best_deal

  0.95 seconds - /Users/morgan/jobhunting/iwoca/coding-challenge/accelerate_runner/lib/solutions/CHK/checkout_solution.py:24 - quantities_geq
  4.45 seconds - /Users/morgan/jobhunting/iwoca/coding-challenge/accelerate_runner/lib/solutions/CHK/checkout_solution.py:122 - find_best_deal
