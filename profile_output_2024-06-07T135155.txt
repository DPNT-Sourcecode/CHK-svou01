Timer unit: 1e-09 s

Total time: 1.20549 s
File: /Users/morgan/jobhunting/iwoca/coding-challenge/accelerate_runner/lib/solutions/CHK/checkout_solution.py
Function: quantities_geq at line 24

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    24                                           @line_profiler.profile
    25                                           def quantities_geq(lhs: Quantities, rhs: Quantities) -> bool:
    26   2300119  167304000.0     72.7     13.9      lhs
    27   2384015  466936000.0    195.9     38.7      for sku, quantity in rhs.items():
    28   2300118  286529000.0    124.6     23.8          if sku not in lhs or lhs[sku] < quantity:
    29   2216222  275380000.0    124.3     22.8              return False
    30     83896    9344000.0    111.4      0.8      return True

Total time: 4.66648 s
File: /Users/morgan/jobhunting/iwoca/coding-challenge/accelerate_runner/lib/solutions/CHK/checkout_solution.py
Function: find_best_deal at line 118

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   118                                           @line_profiler.profile
   119                                           def find_best_deal(
   120                                               quantities: Quantities,
   121                                               *,
   122                                               offers: list[Offer] = OFFERS
   123                                           ) -> Optional[Deal]:
   124     83897  103960000.0   1239.1      2.2      if all(quantity == 0 for quantity in quantities.values()):
   125     27776    3668000.0    132.1      0.1          return []
   126                                           
   127     56121   11730000.0    209.0      0.3      applicable_offers = (offer for offer in offers if quantities_geq(quantities, offer.requires_quantities))
   128                                           
   129     56121    5516000.0     98.3      0.1      best_deal = None
   130     56121    6396000.0    114.0      0.1      best_price = math.inf
   131    139987 4308053000.0  30774.7     92.3      for offer in applicable_offers:
   132     83896   16773000.0    199.9      0.4          new_quantities = {**quantities}
   133    167792   30338000.0    180.8      0.7          for included_sku, included_quantity in offer.includes.items():
   134     83896    9321000.0    111.1      0.2              if included_sku in new_quantities:
   135    167792   27381000.0    163.2      0.6                  new_quantities[included_sku] = max(
   136     83896   10024000.0    119.5      0.2                      0, new_quantities[included_sku] - included_quantity
   137                                                           )
   138                                           
   139     83896   36404000.0    433.9      0.8          rest_of_deal = find_best_deal(new_quantities)
   140     83866    7408000.0     88.3      0.2          if rest_of_deal is None:
   141                                                       continue
   142                                           
   143     83866   11541000.0    137.6      0.2          new_deal = [offer, *rest_of_deal]
   144                                           
   145     83866   57651000.0    687.4      1.2          if (new_deal_price := get_deal_price(new_deal)) < best_price:
   146     56100    5365000.0     95.6      0.1              best_price = new_deal_price
   147     56100    8730000.0    155.6      0.2              best_deal = new_deal
   148                                           
   149     56090    6224000.0    111.0      0.1      return best_deal

  1.21 seconds - /Users/morgan/jobhunting/iwoca/coding-challenge/accelerate_runner/lib/solutions/CHK/checkout_solution.py:24 - quantities_geq
  4.67 seconds - /Users/morgan/jobhunting/iwoca/coding-challenge/accelerate_runner/lib/solutions/CHK/checkout_solution.py:118 - find_best_deal
