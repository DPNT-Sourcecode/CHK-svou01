Timer unit: 1e-09 s

Total time: 2.3e-05 s
File: /Users/morgan/jobhunting/iwoca/coding-challenge/accelerate_runner/lib/solutions/CHK/checkout_solution.py
Function: quantities_geq at line 27

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    27                                           @cache
    28                                           @line_profiler.profile
    29                                           def quantities_geq(lhs: Quantities, rhs: Quantities) -> bool:
    30        58      11000.0    189.7     47.8      for sku, quantity in rhs.items():
    31        41       3000.0     73.2     13.0          if sku not in lhs or lhs[sku] < quantity:
    32        24       8000.0    333.3     34.8              return False
    33        17       1000.0     58.8      4.3      return True

Total time: 0.00042 s
File: /Users/morgan/jobhunting/iwoca/coding-challenge/accelerate_runner/lib/solutions/CHK/checkout_solution.py
Function: find_best_deal at line 121

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   121                                           @line_profiler.profile
   122                                           def find_best_deal(
   123                                               quantities: Quantities,
   124                                               *,
   125                                               offers: frozenset[Offer] = OFFERS,
   126                                           ) -> Optional[Deal]:
   127                                           
   128         1          0.0      0.0      0.0      @dataclass
   129         1     311000.0 311000.0     74.0      class Scenario:
   130                                                   quantities: Quantities
   131                                                   deal: Deal
   132                                                   available_offers: frozenset[Offer]
   133                                               
   134         1       1000.0   1000.0      0.2      queue = SimpleQueue()
   135         1       1000.0   1000.0      0.2      empty = FrozenList([])
   136         1          0.0      0.0      0.0      empty.freeze()
   137         1       2000.0   2000.0      0.5      queue.put(Scenario(quantities, empty, offers))
   138                                           
   139         1          0.0      0.0      0.0      best_price = math.inf
   140         1          0.0      0.0      0.0      best_deal = None
   141                                           
   142         1       1000.0   1000.0      0.2      while True:
   143         1          0.0      0.0      0.0          try:
   144         1          0.0      0.0      0.0              scenario = queue.get_nowait()
   145                                                   except Empty:
   146                                                       break
   147                                                       
   148         1       2000.0   2000.0      0.5          if all(quantity == 0 for quantity in scenario.quantities.values()):
   149                                                       price = get_deal_price(scenario.deal)
   150                                                       if price < best_price:
   151                                                           best_price = price
   152                                                           best_deal = scenario.deal
   153                                                       continue
   154                                           
   155         2      99000.0  49500.0     23.6          applicable_offers = frozenset(
   156         1          0.0      0.0      0.0              offer for offer in scenario.available_offers if quantities_geq(
   157                                                           scenario.quantities,
   158                                                           offer.requires_quantities
   159                                                       )
   160                                                   )
   161                                           
   162         1          0.0      0.0      0.0          for offer in applicable_offers:
   163         1       2000.0   2000.0      0.5              new_quantities = copy(scenario.quantities)
   164         1          0.0      0.0      0.0              for included_sku, included_quantity in offer.includes.items():
   165         1          0.0      0.0      0.0                  if included_sku in new_quantities:
   166         2       1000.0    500.0      0.2                      new_quantities[included_sku] = max(
   167         1          0.0      0.0      0.0                          0, new_quantities[included_sku] - included_quantity
   168                                                               )
   169                                                       
   170                                                       new_deal = FrozenList([offer, *scenario.deal])
   171                                                       new_deal.freeze()
   172                                           
   173                                                       queue.put(Scenario(
   174                                                           frozendict(new_quantities),
   175                                                           new_deal,
   176                                                           applicable_offers
   177                                                       ))
   178                                           
   179                                               return best_deal

  0.00 seconds - /Users/morgan/jobhunting/iwoca/coding-challenge/accelerate_runner/lib/solutions/CHK/checkout_solution.py:27 - quantities_geq
  0.00 seconds - /Users/morgan/jobhunting/iwoca/coding-challenge/accelerate_runner/lib/solutions/CHK/checkout_solution.py:121 - find_best_deal
