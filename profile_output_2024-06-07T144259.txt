Timer unit: 1e-09 s

Total time: 0.047177 s
File: /Users/morgan/jobhunting/iwoca/coding-challenge/accelerate_runner/lib/solutions/CHK/checkout_solution.py
Function: quantities_geq at line 26

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    26                                           @cache
    27                                           @line_profiler.profile
    28                                           def quantities_geq(lhs: Quantities, rhs: Quantities) -> bool:
    29    150344   24844000.0    165.2     52.7      for sku, quantity in rhs.items():
    30     76074   13844000.0    182.0     29.3          if sku not in lhs or lhs[sku] < quantity:
    31      1804     273000.0    151.3      0.6              return False
    32     74270    8216000.0    110.6     17.4      return True

Total time: 3.87737 s
File: /Users/morgan/jobhunting/iwoca/coding-challenge/accelerate_runner/lib/solutions/CHK/checkout_solution.py
Function: find_best_deal at line 120

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   120                                           @line_profiler.profile
   121                                           def find_best_deal(
   122                                               quantities: Quantities,
   123                                               *,
   124                                               offers: frozenset[Offer] = OFFERS,
   125                                           ) -> Optional[Deal]:
   126                                           
   127         1          0.0      0.0      0.0      @dataclass
   128         1     300000.0 300000.0      0.0      class Scenario:
   129                                                   quantities: Quantities
   130                                                   deal: Deal
   131                                                   available_offers: frozenset[Offer]
   132                                               
   133         1      11000.0  11000.0      0.0      queue = Queue()
   134         1       1000.0   1000.0      0.0      empty = FrozenList([])
   135         1          0.0      0.0      0.0      empty.freeze()
   136         1       6000.0   6000.0      0.0      queue.put(Scenario(quantities, empty, offers))
   137                                           
   138         1       1000.0   1000.0      0.0      best_price = math.inf
   139         1          0.0      0.0      0.0      best_deal = None
   140                                           
   141     34525    7370000.0    213.5      0.2      while True:
   142     34525    2797000.0     81.0      0.1          try:
   143     34525   66948000.0   1939.1      1.7              scenario = queue.get_nowait()
   144                                                   except Empty:
   145                                                       break
   146                                                       
   147     34525   28229000.0    817.6      0.7          if all(quantity == 0 for quantity in scenario.quantities.values()):
   148                                                       price = get_deal_price(scenario.deal)
   149                                                       if price < best_price:
   150                                                           best_price = price
   151                                                           best_deal = scenario.deal
   152                                                       continue
   153                                           
   154     69050  593278000.0   8592.0     15.3          applicable_offers = frozenset(
   155     34525    3286000.0     95.2      0.1              offer for offer in scenario.available_offers if quantities_geq(
   156                                                           scenario.quantities,
   157                                                           offer.requires_quantities
   158                                                       )
   159                                                   )
   160                                           
   161    610031   85043000.0    139.4      2.2          for offer in applicable_offers:
   162    575507  396856000.0    689.6     10.2              new_quantities = {**scenario.quantities}
   163   1183860  239413000.0    202.2      6.2              for included_sku, included_quantity in offer.includes.items():
   164    608353   65963000.0    108.4      1.7                  if included_sku in new_quantities:
   165   1216706  205256000.0    168.7      5.3                      new_quantities[included_sku] = max(
   166    608353   73514000.0    120.8      1.9                          0, new_quantities[included_sku] - included_quantity
   167                                                               )
   168                                                       
   169    575507  175544000.0    305.0      4.5              new_deal = FrozenList([offer, *scenario.deal])
   170    575507   71373000.0    124.0      1.8              new_deal.freeze()
   171                                           
   172   1151013 1552918000.0   1349.2     40.1              queue.put(Scenario(
   173    575507  215018000.0    373.6      5.5                  frozendict(new_quantities),
   174    575506   50483000.0     87.7      1.3                  new_deal,
   175    575506   43758000.0     76.0      1.1                  applicable_offers
   176                                                       ))
   177                                           
   178                                               return best_deal

  0.05 seconds - /Users/morgan/jobhunting/iwoca/coding-challenge/accelerate_runner/lib/solutions/CHK/checkout_solution.py:26 - quantities_geq
  3.88 seconds - /Users/morgan/jobhunting/iwoca/coding-challenge/accelerate_runner/lib/solutions/CHK/checkout_solution.py:120 - find_best_deal
