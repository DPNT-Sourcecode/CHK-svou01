Timer unit: 1e-09 s

Total time: 0.047876 s
File: /Users/morgan/jobhunting/iwoca/coding-challenge/accelerate_runner/lib/solutions/CHK/checkout_solution.py
Function: quantities_geq at line 26

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    26                                           @cache
    27                                           @line_profiler.profile
    28                                           def quantities_geq(lhs: Quantities, rhs: Quantities) -> bool:
    29    161882   24794000.0    153.2     51.8      for sku, quantity in rhs.items():
    30     81975   14393000.0    175.6     30.1          if sku not in lhs or lhs[sku] < quantity:
    31      2068     302000.0    146.0      0.6              return False
    32     79907    8387000.0    105.0     17.5      return True

Total time: 3.65678 s
File: /Users/morgan/jobhunting/iwoca/coding-challenge/accelerate_runner/lib/solutions/CHK/checkout_solution.py
Function: find_best_deal at line 120

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   120                                           @line_profiler.profile
   121                                           def find_best_deal(
   122                                               quantities: Quantities,
   123                                               *,
   124                                               offers: frozenset[Offer] = OFFERS,
   125                                           ) -> Optional[Deal]:
   126                                           
   127         1          0.0      0.0      0.0      @dataclass
   128         1     334000.0 334000.0      0.0      class Scenario:
   129                                                   quantities: Quantities
   130                                                   deal: Deal
   131                                                   available_offers: frozenset[Offer]
   132                                               
   133         1       1000.0   1000.0      0.0      queue = SimpleQueue()
   134         1       1000.0   1000.0      0.0      empty = FrozenList([])
   135         1          0.0      0.0      0.0      empty.freeze()
   136         1       1000.0   1000.0      0.0      queue.put(Scenario(quantities, empty, offers))
   137                                           
   138         1          0.0      0.0      0.0      best_price = math.inf
   139         1          0.0      0.0      0.0      best_deal = None
   140                                           
   141     41701    9164000.0    219.8      0.3      while True:
   142     41701    3357000.0     80.5      0.1          try:
   143     41701   17683000.0    424.0      0.5              scenario = queue.get_nowait()
   144                                                   except Empty:
   145                                                       break
   146                                                       
   147     41701   30422000.0    729.5      0.8          if all(quantity == 0 for quantity in scenario.quantities.values()):
   148                                                       price = get_deal_price(scenario.deal)
   149                                                       if price < best_price:
   150                                                           best_price = price
   151                                                           best_deal = scenario.deal
   152                                                       continue
   153                                           
   154     83402  648814000.0   7779.4     17.7          applicable_offers = frozenset(
   155     41701    4395000.0    105.4      0.1              offer for offer in scenario.available_offers if quantities_geq(
   156                                                           scenario.quantities,
   157                                                           offer.requires_quantities
   158                                                       )
   159                                                   )
   160                                           
   161    732385   95389000.0    130.2      2.6          for offer in applicable_offers:
   162    690685  734990000.0   1064.1     20.1              new_quantities = {**scenario.quantities}
   163   1419919  272366000.0    191.8      7.4              for included_sku, included_quantity in offer.includes.items():
   164    729234   75627000.0    103.7      2.1                  if included_sku in new_quantities:
   165   1458468  240152000.0    164.7      6.6                      new_quantities[included_sku] = max(
   166    729234   86303000.0    118.3      2.4                          0, new_quantities[included_sku] - included_quantity
   167                                                               )
   168                                                       
   169    690685  214637000.0    310.8      5.9              new_deal = FrozenList([offer, *scenario.deal])
   170    690685   84488000.0    122.3      2.3              new_deal.freeze()
   171                                           
   172   1381370  528089000.0    382.3     14.4              queue.put(Scenario(
   173    690685  499284000.0    722.9     13.7                  frozendict(new_quantities),
   174    690685   58756000.0     85.1      1.6                  new_deal,
   175    690685   52527000.0     76.1      1.4                  applicable_offers
   176                                                       ))
   177                                           
   178                                               return best_deal

  0.05 seconds - /Users/morgan/jobhunting/iwoca/coding-challenge/accelerate_runner/lib/solutions/CHK/checkout_solution.py:26 - quantities_geq
  3.66 seconds - /Users/morgan/jobhunting/iwoca/coding-challenge/accelerate_runner/lib/solutions/CHK/checkout_solution.py:120 - find_best_deal
